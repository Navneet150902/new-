npx create-react-app kanban-board
cd kanban-board
npm install react-beautiful-dnd styled-components
import React, { useState } from 'react';
import styled from 'styled-components';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
const [columns, setColumns] = useState({
    todo: {
        title: 'To Do',
        items: ['Task 1', 'Task 2', 'Task 3'],
    },
    inProgress: {
        title: 'In Progress',
        items: [],
    },
    done: {
        title: 'Done',
        items: [],
    },
});
const Column = ({ column, index }) => {
    return (
        <Droppable droppableId={column.id}>
            {(provided) => (
                <div
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                >
                    <h3>{column.title}</h3>
                    {column.items.map((item, itemIndex) => (
                        <Draggable
                            key={item.id}
                            draggableId={item.id}
                            index={itemIndex}
                        >
                            {(provided) => (
                                <div
                                    ref={provided.innerRef}
                                    {...provided.draggableProps}
                                    {...provided.dragHandleProps}
                                >
                                    {item.content}
                                </div>
                            )}
                        </Draggable>
                    ))}
                    {provided.placeholder}
                </div>
            )}
        </Droppable>
    );
};
const KanbanBoard = () => {
    return (
        <DragDropContext onDragEnd={handleDragEnd}>
            <div style={containerStyle}>
                {Object.keys(columns).map((columnId, index) => (
                    <Column key={columnId} column={columns[columnId]} index={index} />
                ))}
            </div>
        </DragDropContext>
    );
};
const handleDragEnd = ({ destination, source }) => {
    if (!destination) {
        return;
    }

    if (destination.droppableId === source.droppableId && destination.index === source.index) {
        return;
    }

    const sourceColumn = columns[source.droppableId];
    const destinationColumn = columns[destination.droppableId];

    const [removedItem] = sourceColumn.items.splice(source.index, 1);
    destinationColumn.items.splice(destination.index, 0, removedItem);

    setColumns({
        ...columns,
        [source.droppableId]: sourceColumn,
        [destination.droppableId]: destinationColumn,
    });
};
const containerStyle = styled.div`
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    padding: 20px;
`;
